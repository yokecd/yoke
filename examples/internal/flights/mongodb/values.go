// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package mongodb

type Values struct {
	// Arbiter corresponds to the JSON schema field "arbiter".
	Arbiter *ValuesArbiter `json:"arbiter,omitempty" yaml:"arbiter,omitempty" mapstructure:"arbiter,omitempty"`

	// Allowed values: `standalone` or `replicaset`
	Architecture *string `json:"architecture,omitempty" yaml:"architecture,omitempty" mapstructure:"architecture,omitempty"`

	// Auth corresponds to the JSON schema field "auth".
	Auth *ValuesAuth `json:"auth,omitempty" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// Configuration corresponds to the JSON schema field "configuration".
	Configuration *string `json:"configuration,omitempty" yaml:"configuration,omitempty" mapstructure:"configuration,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// Persistence corresponds to the JSON schema field "persistence".
	Persistence *ValuesPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`

	// ReplicaCount corresponds to the JSON schema field "replicaCount".
	ReplicaCount *int `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// VolumePermissions corresponds to the JSON schema field "volumePermissions".
	VolumePermissions *ValuesVolumePermissions `json:"volumePermissions,omitempty" yaml:"volumePermissions,omitempty" mapstructure:"volumePermissions,omitempty"`
}

type ValuesArbiter struct {
	// Configuration corresponds to the JSON schema field "configuration".
	Configuration *string `json:"configuration,omitempty" yaml:"configuration,omitempty" mapstructure:"configuration,omitempty"`
}

type ValuesAuth struct {
	// Name of the custom database to be created during the 1st initialization of
	// MongoDB&reg;
	Database *string `json:"database,omitempty" yaml:"database,omitempty" mapstructure:"database,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Defaults to a random 10-character alphanumeric string if not set
	Password *string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// Defaults to a random 10-character alphanumeric string if not set
	ReplicaSetKey *string `json:"replicaSetKey,omitempty" yaml:"replicaSetKey,omitempty" mapstructure:"replicaSetKey,omitempty"`

	// Defaults to a random 10-character alphanumeric string if not set
	RootPassword *string `json:"rootPassword,omitempty" yaml:"rootPassword,omitempty" mapstructure:"rootPassword,omitempty"`

	// Name of the admin user. Default is root
	RootUser *string `json:"rootUser,omitempty" yaml:"rootUser,omitempty" mapstructure:"rootUser,omitempty"`

	// Name of the custom user to be created during the 1st initialization of
	// MongoDB&reg;. This user only has permissions on the MongoDB&reg; custom
	// database
	Username *string `json:"username,omitempty" yaml:"username,omitempty" mapstructure:"username,omitempty"`
}

type ValuesMetrics struct {
	// Create a side-car container to expose Prometheus metrics
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesMetricsServiceMonitor struct {
	// Create a ServiceMonitor to track metrics using Prometheus Operator
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type ValuesNetworkPolicy struct {
	// Egress corresponds to the JSON schema field "egress".
	Egress *ValuesNetworkPolicyEgress `json:"egress,omitempty" yaml:"egress,omitempty" mapstructure:"egress,omitempty"`

	// Enable network policy using Kubernetes native NP
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Ingress corresponds to the JSON schema field "ingress".
	Ingress *ValuesNetworkPolicyIngress `json:"ingress,omitempty" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`
}

type ValuesNetworkPolicyEgress struct {
	// CustomRules corresponds to the JSON schema field "customRules".
	CustomRules []interface{} `json:"customRules,omitempty" yaml:"customRules,omitempty" mapstructure:"customRules,omitempty"`
}

type ValuesNetworkPolicyIngress struct {
	// CustomRules corresponds to the JSON schema field "customRules".
	CustomRules []interface{} `json:"customRules,omitempty" yaml:"customRules,omitempty" mapstructure:"customRules,omitempty"`

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	NamespaceSelector ValuesNetworkPolicyIngressNamespaceSelector `json:"namespaceSelector,omitempty" yaml:"namespaceSelector,omitempty" mapstructure:"namespaceSelector,omitempty"`

	// PodSelector corresponds to the JSON schema field "podSelector".
	PodSelector ValuesNetworkPolicyIngressPodSelector `json:"podSelector,omitempty" yaml:"podSelector,omitempty" mapstructure:"podSelector,omitempty"`
}

type ValuesNetworkPolicyIngressNamespaceSelector map[string]interface{}

type ValuesNetworkPolicyIngressPodSelector map[string]interface{}

type ValuesPersistence struct {
	// Enable persistence using Persistent Volume Claims
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *string `json:"size,omitempty" yaml:"size,omitempty" mapstructure:"size,omitempty"`
}

type ValuesVolumePermissions struct {
	// Use an init container to set required folder permissions on the data volume
	// before mounting it in the final destination
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}
